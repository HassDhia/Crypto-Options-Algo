name: CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redpanda:
        image: docker.redpanda.com/vectorized/redpanda:v23.1.7
        ports:
          - "9092:9092"
        options: >-
          --health-cmd "rpk cluster health --local --exit-when-healthy"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - "6379:6379"
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run unit tests
        env:
          KAFKA_BROKERS: localhost:9092
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          DERIBIT_KEY: ${{ secrets.DERIBIT_KEY }}
          DERIBIT_SECRET: ${{ secrets.DERIBIT_SECRET }}
        run: |
          pytest scout-agent/ -q
          pytest sizing-agent/ -q
          pytest execution-agent/ -q
          pytest risk-agent/ -q
          pytest tuner-agent/ -q
          pytest services/ingestor/ -q
      - name: Run integration tests
        env:
          KAFKA_BROKERS: localhost:9092
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          DERIBIT_KEY: ${{ secrets.DERIBIT_KEY }}
          DERIBIT_SECRET: ${{ secrets.DERIBIT_SECRET }}
        run: pytest integration-tests -q

  lint-and-build:
    runs-on: ubuntu-latest
    permissions: {contents: read, id-token: write}
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        if: ${{ secrets.GCP_WORKLOAD_ID_PROVIDER != '' && secrets.GCP_PROJECT_ID != '' }}
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_ID_PROVIDER }}
          service_account: gha-terraform@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker images
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}/scout-agent:latest
            ghcr.io/${{ github.repository }}/sizing-agent:latest
            ghcr.io/${{ github.repository }}/execution-agent:latest
            ghcr.io/${{ github.repository }}/risk-agent:latest
            ghcr.io/${{ github.repository }}/tuner-agent:latest
      - name: Helmfile lint
        run: |
          sudo apt-get install -y helm
          curl -sSL https://github.com/helmfile/helmfile/releases/download/v0.155.0/helmfile_0.155.0_linux_amd64.tar.gz | tar -xz
          sudo mv helmfile /usr/local/bin/
          cd infra
          helmfile deps
          helmfile lint
  test-ingestor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: {python-version: '3.11'}
      - name: Unit tests (ingestor)
        run: |
          cd services/ingestor
          pip install poetry
          poetry install --with dev
          poetry run pytest -q

  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: {python-version: '3.11'}
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Start services and run integration tests
        run: |
          docker compose -f docker-compose.dev.yml up -d
          pytest integration-tests -q
